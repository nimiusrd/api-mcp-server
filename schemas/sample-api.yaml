openapi: 3.0.0
info:
  title: サンプルAPI
  description: これはAPIサジェスト機能のデモ用のサンプルAPIです
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: 本番環境
  - url: https://staging-api.example.com/v1
    description: ステージング環境

paths:
  /users:
    get:
      summary: ユーザー一覧の取得
      description: 登録されているすべてのユーザーの一覧を取得します
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: 取得するユーザーの最大数
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: 取得開始位置
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: 新規ユーザーの作成
      description: 新しいユーザーを作成します
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: ユーザーが作成されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: ユーザー情報の取得
      description: 指定されたIDのユーザー情報を取得します
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりません
    put:
      summary: ユーザー情報の更新
      description: 指定されたIDのユーザー情報を更新します
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: ユーザー情報が更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりません
    delete:
      summary: ユーザーの削除
      description: 指定されたIDのユーザーを削除します
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ユーザーID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ユーザーが削除されました
        '404':
          description: ユーザーが見つかりません

  /products:
    get:
      summary: 商品一覧の取得
      description: 登録されているすべての商品の一覧を取得します
      operationId: getProducts
      parameters:
        - name: category
          in: query
          description: 商品カテゴリでフィルタリング
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 取得する商品の最大数
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      summary: 商品情報の取得
      description: 指定されたIDの商品情報を取得します
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: 商品ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: 商品が見つかりません

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: ユーザーID
        name:
          type: string
          description: ユーザー名
        email:
          type: string
          description: メールアドレス
        createdAt:
          type: string
          format: date-time
          description: 作成日時
      required:
        - id
        - name
        - email
        - createdAt

    UserInput:
      type: object
      properties:
        name:
          type: string
          description: ユーザー名
        email:
          type: string
          description: メールアドレス
      required:
        - name
        - email

    Product:
      type: object
      properties:
        id:
          type: string
          description: 商品ID
        name:
          type: string
          description: 商品名
        description:
          type: string
          description: 商品説明
        price:
          type: number
          description: 価格
        category:
          type: string
          description: カテゴリ
        createdAt:
          type: string
          format: date-time
          description: 作成日時
      required:
        - id
        - name
        - price
        - category
        - createdAt
